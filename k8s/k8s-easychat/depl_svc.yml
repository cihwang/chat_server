apiVersion: apps/v1
kind: Deployment
metadata:
  name: easychat-backend
  namespace: easy-chat
spec:
  # Deployment나 StatefulSet이 유지할 "옛날 ReplicaSet"의 수를 제한하는 옵션. 자원공간의 낭비 방지 및 관리의 편의성.
  # deployment 수정, rollout restart 할 경우 Replicaset이 새로 만들어진다. -> 계속 쌓이게 되는데 과거 데이터 개수 제한
  revisionHistoryLimit: 3
  replicas: 2
  selector:
    matchLabels:
      app: easychat-backend
  template:
    metadata:
      labels:
        app: easychat-backend
    spec:
      containers:
        - name: easychat-backend
          image: 058264274560.dkr.ecr.ap-northeast-2.amazonaws.com/chat-backend:latest # 항상 latest
          ports:
            - containerPort: 8080
          # pod는 ec2위에서 실행 -> ec2는 컴퓨팅 자원(스펙 할당), pod 제약을 하지 않으면 ec2 자원을 모두 사용
          # pod에 제약을 걸어 균등하게 자원을 사용할 수 있도록 설정
          resources:
            # 컨테이너가 사용할수 있는 리소스의 최대치
            limits:
              cpu: "1"
              memory: "500Mi"
            # 컨테이너가 시작될떄 보장받아야 하는 최소 자원
            requests:
              cpu: "0.5"
              memory: "250Mi"
          env: # secret 설정
            # name값과 yml의 ${변수} 의 변수명과 일치해야함
            - name: DB_HOST
              valueFrom:
                secretKeyRef:
                  name: my-app-secrets
                  key: DB_HOST # key 값과 일치
            - name: DB_PW
              valueFrom:
                secretKeyRef:
                  name: my-app-secrets
                  key: DB_PW # key 값과 일치
          # 컨테이너 상태 확인을 통해 롤링업데이트 최적화
          # 준비가 됐는지 조사 -> 새로운 pod update시 rolling update(무중단배포) 사용
          # 새로운 pod가 모두 올라왔을때 기존 -> 새로운 pod로 연결을 변경해야함  ===> 제대로 실행됐는지 확인해야한다.
          # spring 서버가 온전히 떳는지 체크하는 요청(pod 자신이 스스로 헬스체크 진행) -> 온전히 떳을 경우(200 ok) k8s에 응답
          readinessProbe:
            httpGet:
              # healthcheck 경로
              path: /health
              port: 8080
            # 컨테이너 시작 후 지연 후 요청 시작(초)
            initialDelaySeconds: 10
            # 확인 반복 주기
            periodSeconds: 10

---
apiVersion: v1
kind: Service
metadata:
  name: easychat-backend-service
  namespace: easy-chat
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: 8080
  selector:
    app: easychat-backend